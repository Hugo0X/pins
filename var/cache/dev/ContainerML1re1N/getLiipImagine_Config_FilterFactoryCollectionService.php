<?php

namespace ContainerML1re1N;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLiipImagine_Config_FilterFactoryCollectionService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'liip_imagine.config.filter_factory_collection' shared service.
     *
     * @return \Liip\ImagineBundle\Config\FilterFactoryCollection
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'FilterFactoryCollection.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'FilterFactoryInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Filter'.\DIRECTORY_SEPARATOR.'AutoRotateFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Filter'.\DIRECTORY_SEPARATOR.'FlipFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Filter'.\DIRECTORY_SEPARATOR.'GrayscaleFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Filter'.\DIRECTORY_SEPARATOR.'InterlaceFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Filter'.\DIRECTORY_SEPARATOR.'RelativeResizeFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Filter'.\DIRECTORY_SEPARATOR.'RotateFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Filter'.\DIRECTORY_SEPARATOR.'StripFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'liip'.\DIRECTORY_SEPARATOR.'imagine-bundle'.\DIRECTORY_SEPARATOR.'Factory'.\DIRECTORY_SEPARATOR.'Config'.\DIRECTORY_SEPARATOR.'Filter'.\DIRECTORY_SEPARATOR.'WatermarkFactory.php';

        return $container->privates['liip_imagine.config.filter_factory_collection'] = new \Liip\ImagineBundle\Config\FilterFactoryCollection(($container->privates['liip_imagine.factory.config.filter.auto_rotate'] ?? ($container->privates['liip_imagine.factory.config.filter.auto_rotate'] = new \Liip\ImagineBundle\Factory\Config\Filter\AutoRotateFactory())), ($container->privates['liip_imagine.factory.config.filter.background'] ?? $container->load('getLiipImagine_Factory_Config_Filter_BackgroundService')), ($container->privates['liip_imagine.factory.config.filter.crop'] ?? $container->load('getLiipImagine_Factory_Config_Filter_CropService')), ($container->privates['liip_imagine.factory.config.filter.downscale'] ?? $container->load('getLiipImagine_Factory_Config_Filter_DownscaleService')), ($container->privates['liip_imagine.factory.config.filter.flip'] ?? ($container->privates['liip_imagine.factory.config.filter.flip'] = new \Liip\ImagineBundle\Factory\Config\Filter\FlipFactory())), ($container->privates['liip_imagine.factory.config.filter.grayscale'] ?? ($container->privates['liip_imagine.factory.config.filter.grayscale'] = new \Liip\ImagineBundle\Factory\Config\Filter\GrayscaleFactory())), ($container->privates['liip_imagine.factory.config.filter.interlace'] ?? ($container->privates['liip_imagine.factory.config.filter.interlace'] = new \Liip\ImagineBundle\Factory\Config\Filter\InterlaceFactory())), ($container->privates['liip_imagine.factory.config.filter.paste'] ?? $container->load('getLiipImagine_Factory_Config_Filter_PasteService')), ($container->privates['liip_imagine.factory.config.filter.relative_resize'] ?? ($container->privates['liip_imagine.factory.config.filter.relative_resize'] = new \Liip\ImagineBundle\Factory\Config\Filter\RelativeResizeFactory())), ($container->privates['liip_imagine.factory.config.filter.resize'] ?? $container->load('getLiipImagine_Factory_Config_Filter_ResizeService')), ($container->privates['liip_imagine.factory.config.filter.rotate'] ?? ($container->privates['liip_imagine.factory.config.filter.rotate'] = new \Liip\ImagineBundle\Factory\Config\Filter\RotateFactory())), ($container->privates['liip_imagine.factory.config.filter.scale'] ?? $container->load('getLiipImagine_Factory_Config_Filter_ScaleService')), ($container->privates['liip_imagine.factory.config.filter.strip'] ?? ($container->privates['liip_imagine.factory.config.filter.strip'] = new \Liip\ImagineBundle\Factory\Config\Filter\StripFactory())), ($container->privates['liip_imagine.factory.config.filter.thumbnail'] ?? $container->load('getLiipImagine_Factory_Config_Filter_ThumbnailService')), ($container->privates['liip_imagine.factory.config.filter.upscale'] ?? $container->load('getLiipImagine_Factory_Config_Filter_UpscaleService')), ($container->privates['liip_imagine.factory.config.filter.watermark'] ?? ($container->privates['liip_imagine.factory.config.filter.watermark'] = new \Liip\ImagineBundle\Factory\Config\Filter\WatermarkFactory())));
    }
}
